on:
  push:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the Release'  
  
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - {GOOS: darwin,    GOARCH: amd64                 }
        - {GOOS: darwin,    GOARCH: arm64                 }
        - {GOOS: dragonfly, GOARCH: amd64                 }
        - {GOOS: freebsd,   GOARCH: 386                   }
        - {GOOS: freebsd,   GOARCH: amd64                 }
        - {GOOS: freebsd,   GOARCH: arm                   }
        - {GOOS: freebsd,   GOARCH: arm64                 }
        - {GOOS: illumos,   GOARCH: amd64                 }
        - {GOOS: linux,     GOARCH: 386                   }
        - {GOOS: linux,     GOARCH: amd64                 }
        - {GOOS: linux,     GOARCH: arm                   }
        - {GOOS: linux,     GOARCH: arm64                 }
        - {GOOS: linux,     GOARCH: ppc64                 }
        - {GOOS: linux,     GOARCH: ppc64le               }
        - {GOOS: linux,     GOARCH: mips                  }
        - {GOOS: linux,     GOARCH: mipsle                }
        - {GOOS: linux,     GOARCH: mips64                }
        - {GOOS: linux,     GOARCH: mips64le              }
        - {GOOS: linux,     GOARCH: riscv64               }
        - {GOOS: linux,     GOARCH: s390x                 }
        - {GOOS: netbsd,    GOARCH: 386                   }
        - {GOOS: netbsd,    GOARCH: amd64                 }
        - {GOOS: netbsd,    GOARCH: arm                   }
        - {GOOS: netbsd,    GOARCH: arm64                 }
        - {GOOS: openbsd,   GOARCH: 386                   }
        - {GOOS: openbsd,   GOARCH: amd64                 }
        - {GOOS: openbsd,   GOARCH: arm                   }
        - {GOOS: openbsd,   GOARCH: arm64                 }
        - {GOOS: plan9,     GOARCH: 386                   }
        - {GOOS: plan9,     GOARCH: amd64                 }
        - {GOOS: plan9,     GOARCH: arm                   }
        - {GOOS: solaris,   GOARCH: amd64                 }
        - {GOOS: windows,   GOARCH: 386,      suffix: .exe}
        - {GOOS: windows,   GOARCH: amd64,    suffix: .exe}
        - {GOOS: windows,   GOARCH: arm,      suffix: .exe}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '^1.16.0'
    - name: Build
      run: go build -o github-actions-act-runner-${{matrix.GOOS}}-${{matrix.GOARCH}}${{matrix.suffix}}
      env:
        GOOS: ${{matrix.GOOS}}
        GOARCH: ${{matrix.GOARCH}}
    - uses: actions/upload-artifact@v2
      with:
        name: binary-${{matrix.GOOS}}-${{matrix.GOARCH}}
        path: github-actions-act-runner-${{matrix.GOOS}}-${{matrix.GOARCH}}${{matrix.suffix}}
#######################################
########## publish to github ##########
#######################################
  publish-to-github:
    name: deploy to github
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.version }}
    continue-on-error: true
    steps:
    - uses: actions/download-artifact@v2
      with:
        path: "artifacts"
    - uses: ncipollo/release-action@v1
      with:
        artifacts: "artifacts/**/*"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.event.inputs.version }}
        commit: ${{ github.sha }}
#########################################
########## publish to deb repo ##########
#########################################
  publish-to-deb-repo:
    needs: build
    # TODO: uncomment
    # if: ${{ github.event.inputs.version }}
    runs-on: ubuntu-latest
    name: deploy to deb repo
    env:
      DEPLOY_DISTROS: "debian:buster ubuntu:focal"
      DEPLOY_ARCHS: "amd64 i386 armhf arm64" # architectures from https://wiki.debian.org/SupportedArchitectures
    steps:
      # clone must go before downloading artifacts because it cleans up the directory before cloning
    - name: git clone
      uses: actions/checkout@v2
      with: {submodules: false}
    - uses: actions/download-artifact@v2
      with:
        path: "artifacts"
    - name: add cppfw repo to install myci scripts from
      uses: myci-actions/add-deb-repo@master
      with:
        repo: deb http://gagis.hopto.org/repo/cppfw/$(lsb_release --id --short | tr '[:upper:]' '[:lower:]') $(lsb_release --codename --short) main
        repo-name: cppfw
        key-server: http://gagis.hopto.org/repo/cppfw/pubkey.gpg
    - name: install debian package tools
      run: |
        apt --quiet update
        apt --quiet install --assume-yes dpkg-dev debhelper devscripts myci
    - name: add entry to debian/changelog
      run: dch --newversion="${{ github.event.inputs.version }}" "another release"
      # this 'if:' here is for cases when job's 'if:' is commented for debugging purposes
      if: ${{ github.event.inputs.version }}
    - name: create deb package
      run: |
        for arch in $DEPLOY_ARCHS; do
          dpkg-buildpackage --host-arch $arch
        done
    - name: deploy packages to deb repo
      run: |
        echo "${{ secrets.MYCI_REPO_SSH_KEY }}" > repo_key_rsa && chmod 600 repo_key_rsa
        for os_distro in $DEPLOY_DISTROS; do
          arr=(${os_distro//:/ })
          os=${arr[0]}
          distro=${arr[1]}
          echo "os = $os, distro = $distro"
          myci-deploy-debian-ssh-freight.sh --key repo_key_rsa --server gagis.hopto.org --user chrishx --repo chrishx/$os --distro $distro --component main ../*.deb
        done
