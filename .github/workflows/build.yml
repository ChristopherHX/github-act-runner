on:
  push:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the Release'
      changelog:
        description: 'Changelog of the Release'  
  
env:
  RUNNER_DEV_VERSION: "0.0.4"
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      # 
      fail-fast: false
      matrix:
        include:
        # go tool dist list -json to get the source
        # - {GOOS: android,   GOARCH: 386                   }
        - {GOOS: android,   GOARCH: amd64                 }
        # - {GOOS: android,   GOARCH: arm                   }
        - {GOOS: android,   GOARCH: arm64                 }
        - {GOOS: darwin,    GOARCH: amd64                 }
        - {GOOS: darwin,    GOARCH: arm64                 }
        - {GOOS: dragonfly, GOARCH: amd64                 }
        - {GOOS: freebsd,   GOARCH: 386                   }
        - {GOOS: freebsd,   GOARCH: amd64                 }
        - {GOOS: freebsd,   GOARCH: arm                   }
        - {GOOS: freebsd,   GOARCH: arm64                 }
        - {GOOS: illumos,   GOARCH: amd64                 }
        - {GOOS: linux,     GOARCH: 386                   }
        - {GOOS: linux,     GOARCH: amd64                 }
        - {GOOS: linux,     GOARCH: arm                   }
        - {GOOS: linux,     GOARCH: arm64                 }
        - {GOOS: linux,     GOARCH: ppc64                 }
        - {GOOS: linux,     GOARCH: ppc64le               }
        - {GOOS: linux,     GOARCH: mips                  }
        - {GOOS: linux,     GOARCH: mipsle                }
        - {GOOS: linux,     GOARCH: mips64                }
        - {GOOS: linux,     GOARCH: mips64le              }
        - {GOOS: linux,     GOARCH: riscv64               }
        - {GOOS: linux,     GOARCH: s390x                 }
        - {GOOS: netbsd,    GOARCH: 386                   }
        - {GOOS: netbsd,    GOARCH: amd64                 }
        - {GOOS: netbsd,    GOARCH: arm                   }
        - {GOOS: netbsd,    GOARCH: arm64                 }
        - {GOOS: openbsd,   GOARCH: 386                   }
        - {GOOS: openbsd,   GOARCH: amd64                 }
        - {GOOS: openbsd,   GOARCH: arm                   }
        - {GOOS: openbsd,   GOARCH: arm64                 }
        - {GOOS: openbsd,   GOARCH: mips64                }
        - {GOOS: plan9,     GOARCH: 386                   }
        - {GOOS: plan9,     GOARCH: amd64                 }
        - {GOOS: plan9,     GOARCH: arm                   }
        - {GOOS: solaris,   GOARCH: amd64                 }
        - {GOOS: windows,   GOARCH: 386,      suffix: .exe}
        - {GOOS: windows,   GOARCH: amd64,    suffix: .exe}
        - {GOOS: windows,   GOARCH: arm,      suffix: .exe}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '^1.16.0'
    - name: Build
      run: |
        go build -ldflags "-X main.version=${{ github.event.inputs.version || format('{0}-dev-{1}', env.RUNNER_DEV_VERSION, github.sha) }}" ${{ matrix.GOOS == 'android' && '-tags=''androiddnsfix''' || ''}} -o github-act-runner-${{matrix.GOOS}}-${{matrix.GOARCH}}${{matrix.suffix}}
        mkdir output
        cp github-act-runner-${{matrix.GOOS}}-${{matrix.GOARCH}}${{matrix.suffix}} output/github-act-runner${{matrix.suffix}}
      env:
        GOOS: ${{matrix.GOOS}}
        GOARCH: ${{matrix.GOARCH}}
    - name: Package tar
      if: ${{matrix.GOOS != 'windows'}}
      run: |
        cp compat/*.sh output/
        cd output
        tar czf ../binary-${{matrix.GOOS}}-${{matrix.GOARCH}}.tar.gz ./*
    - name: Package zip
      if: ${{matrix.GOOS == 'windows'}}
      run: |
        cp compat/*.cmd output/
        cd output
        zip ../binary-${{matrix.GOOS}}-${{matrix.GOARCH}}.zip ./*
    - uses: actions/upload-artifact@v2
      with:
        name: binary-${{matrix.GOOS}}-${{matrix.GOARCH}}
        path: github-act-runner-${{matrix.GOOS}}-${{matrix.GOARCH}}${{matrix.suffix}}
    - uses: actions/upload-artifact@v2
      with:
        name: bundle-${{matrix.GOOS}}-${{matrix.GOARCH}}
        path: 'binary-${{matrix.GOOS}}-${{matrix.GOARCH}}.*'
#######################################
########## publish to github ##########
#######################################
  publish-to-github:
    name: deploy to github
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.version }}
    continue-on-error: true
    steps:
    - uses: actions/download-artifact@v2
      with:
        path: "artifacts"
    - uses: ncipollo/release-action@v1
      with:
        artifacts: "artifacts/**/*.zip,artifacts/**/*.tar.gz"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: v${{ github.event.inputs.version }}
        commit: ${{ github.sha }}
        body: |
          # Changes
          ${{ fromJSON(github.event.inputs.changelog) || 'No changelog provided' }}

          # Using your self hosted runner
          Download and extract the self-hosted runner artifact for your system, then [follow the official Documentation](https://docs.github.com/en/actions/hosting-your-own-runners/adding-self-hosted-runners) (follow the linux instruction if your system isn't listed).

          If your system doesn't have bash installed and isn't windows then:
          |replace|with|
          ---|---
          |`./config.sh`|`./github-act-runner configure`|
          |`./config.sh remove`|`./github-act-runner remove`|
          |`./run.sh`|`./github-act-runner run`|

          The runner configuration is saved in / loaded from your current working directory, while using the `github-act-runner` command directly.

#########################################
########## publish to deb repo ##########
#########################################
  build-and-publish-to-deb-repo:
    needs: build
    runs-on: ubuntu-latest
    name: build and deploy to deb repo
    env:
      DEPLOY_ARCHS: "amd64 i386 armhf arm64" # architectures from https://wiki.debian.org/SupportedArchitectures
    steps:
    - name: git clone
      uses: actions/checkout@v2
      with: {submodules: false}
    - uses: actions/download-artifact@v2
      with:
        path: "artifacts"
    - name: add cppfw repo to install myci scripts from
      uses: myci-actions/add-deb-repo@master
      with:
        repo: deb http://gagis.hopto.org/repo/cppfw/$(lsb_release --id --short | tr '[:upper:]' '[:lower:]') $(lsb_release --codename --short) main
        repo-name: cppfw
        key-server: http://gagis.hopto.org/repo/cppfw/pubkey.gpg
    - name: install debian package tools
      run: |
        sudo apt --quiet update
        sudo apt --quiet install --assume-yes dpkg-dev debhelper devscripts myci
    - name: add entry to debian/changelog
      run: dch --newversion="${{ github.event.inputs.version || format('{0}-dev-{1}', env.RUNNER_DEV_VERSION, github.sha) }}" "another release"
    - name: create deb package
      run: |
        for arch in $DEPLOY_ARCHS; do
          dpkg-buildpackage --build=binary --no-sign --host-arch $arch
        done
        mkdir -p debs
        cp ../*.deb debs/
    - uses: actions/upload-artifact@v2
      continue-on-error: true
      with:
        name: debs
        path: 'debs/*.deb'
    - name: deploy packages to deb repo
      if: ${{ github.event.inputs.version && fromJSON(env.HAVE_MYCI_REPO_SSH_KEY) }}
      env:
        HAVE_MYCI_REPO_SSH_KEY: ${{ toJSON(secrets.MYCI_REPO_SSH_KEY != '') }}
      run: |
        echo "${{ secrets.MYCI_REPO_SSH_KEY }}" > repo_key_rsa && chmod 600 repo_key_rsa
        myci-deploy-debian-ssh-freight.sh --key repo_key_rsa --server gagis.hopto.org --user chrishx --repo chrishx/deb --distro all --component main ../*.deb
  
  run-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Prepare actions-runner
      run: |
        # Create a folder
        mkdir actions-runner && cd actions-runner
        # Download the latest runner package
        curl -O -L https://github.com/ChristopherHX/runner.server/releases/download/v3.2.1/actions-runner-linux-x64-3.2.1.tar.gz
        # Extract the installer
        tar xzf ./actions-runner-linux-x64-3.2.1.tar.gz
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: bundle-linux-amd64
        path: runner
    - name: Unpack Artifact
      run: |
        tar xzf ./binary-linux-amd64.tar.gz
      working-directory: runner
    - name: Run Tests
      run: |
        ./actions-runner/bin/Runner.Client startserver --server http://*:5023 &
        sleep 2
        ./runner/config.sh --unattended --url http://localhost:5023/runner/test --token WhichToken
        ./runner/run.sh&
        sleep 2
        ./actions-runner/bin/Runner.Client --server http://localhost:5023 -W ./.github/testworkflows